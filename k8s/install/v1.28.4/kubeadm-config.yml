# kubeadm 配置文件文档说明: https://pkg.go.dev/k8s.io/kubernetes@v1.28.4/cmd/kubeadm/app/apis/kubeadm/v1beta3
# InitConfiguration https://pkg.go.dev/k8s.io/kubernetes@v1.28.4/cmd/kubeadm/app/apis/kubeadm/v1beta3#InitConfiguration
# ClusterConfiguration https://pkg.go.dev/k8s.io/kubernetes@v1.28.4/cmd/kubeadm/app/apis/kubeadm/v1beta3#ClusterConfiguration
# JoinConfiguration https://pkg.go.dev/k8s.io/kubernetes@v1.28.4/cmd/kubeadm/app/apis/kubeadm/v1beta3#JoinConfiguration
# KubeProxyConfiguration https://pkg.go.dev/k8s.io/kube-proxy/config/v1alpha1#KubeProxyConfiguration
# KubeletConfiguration https://pkg.go.dev/k8s.io/kubelet/config/v1beta1#KubeletConfiguration

# 利用 kubeadm 创建高可用集群 https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/high-availability/

# 详细配置项参考官网: https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta3/
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    token: abcdef.0123456789abcdef
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
localAPIEndpoint:
  advertiseAddress: 10.180.35.6
  bindPort: 6443
nodeRegistration:
#  criSocket: unix:///var/run/containerd/containerd.sock
  criSocket: unix:///run/cri-dockerd.sock
  name: master
  imagePullPolicy: IfNotPresent
  taints:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
# 多 master 时添加此配置，master join 的 certificate-key 值
#certificateKey: "e6a2eb8581237ab72a4f494f30285ec12a9694d750b9785706a83bfcbbbd2204"

#---
## 多 master 时开启 JoinConfiguration 配置
#apiVersion: kubeadm.k8s.io/v1beta3
#kind: JoinConfiguration
#nodeRegistration:
#  # 默认是主机名
#  name: master
#  criSocket: unix:///var/run/containerd/containerd.sock
#  taints:
#  - effect: NoSchedule
#    key: node-role.kubernetes.io/master
#  kubeletExtraArgs: {}
#  ignorePreflightErrors: []
#  # "Always", "IfNotPresent" or "Never" 中的一个值
#  imagePullPolicy: "IfNotPresent"
## 默认值：/etc/kubernetes/pki/ca.crt
#caCertPath: /etc/kubernetes/pki/ca.crt
#discovery:
#  bootstrapToken:
#    apiServerEndpoint: kube-apiserver:6443
#    token: abcdef.0123456789abcdef
#    unsafeSkipCAVerification: true
#  timeout: 5m0s
#  tlsBootstrapToken: abcdef.0123456789abcdef
#controlPlane:
#  localAPIEndpoint: {}
#  # 需要与 InitConfiguration 的 certificateKey 保持一致 值
#  certificateKey:
#skipPhases: {}
#patches: {}

---
# https://github.com/kubernetes/kubernetes/blob/v1.20.5/cmd/kubeadm/app/apis/kubeadm/v1beta2/types.go
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration

# 写入到 /etc/kubernetes/manifests/etcd.yaml
etcd:
  local:
    dataDir: /var/lib/etcd
    extraArgs:
      listen-client-urls: "https://127.0.0.1:2379,https://10.180.35.6:2379,http://10.180.35.6:2379"
networking:
  dnsDomain: cluster.local
  podSubnet: 10.244.0.0/24
  serviceSubnet: 10.96.0.0/12
kubernetesVersion: v1.28.4
controlPlaneEndpoint: "10.180.35.6:6443"

# 写入到 /etc/kubernetes/manifests/kube-apiserver.yaml
apiServer:
  timeoutForControlPlane: 4m0s
  extraArgs:
    service-node-port-range: "0-32767"
#  extraVolumes:
#    name:
#    hostPath:
#    mountPath:
#    readOnly:
#    pathType:

# 写入到 /etc/kubernetes/manifests/kube-controller-manager.yaml
controllerManager:
  extraArgs:
    bind-address: 0.0.0.0
    port: "10252"
#  extraVolumes:
#    name:
#    hostPath:
#    mountPath:
#    readOnly:
#    pathType:

# 写入到 /etc/kubernetes/manifests/kube-scheduler.yaml
scheduler:
  extraArgs:
    bind-address: 0.0.0.0
    port: "10251"
#  extraVolumes:
#    name:
#    hostPath:
#    mountPath:
#    readOnly:
#    pathType:

certificatesDir: /etc/kubernetes/pki
imageRepository: registry.k8s.io
featureGates: {}
clusterName: kubernetes
---
# 关于 KubeProxyConfiguration 的简易参数模板可通过以下命名查看运行中的 k8s kube-proxy 配置，
# 或者查看已导出的 kube-proxy-config.yml 文件
#   kubectl -n kube-system get configmaps kube-proxy -o yaml > kube-proxy-config.yml
# 详细配置请参考官网: https://pkg.go.dev/k8s.io/kube-proxy/config/v1alpha1#KubeProxyConfiguration
# 或官网：https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
# 指定使用的代理模式，如: Linux: ipvs iptables(默认值) userspace Windows: userspace(默认值) kernelspace
mode: ipvs
# 开放指标接口给外部访问，默认值: 127.0.0.1:10249
metricsBindAddress: 0.0.0.0:10249
---
# 初始化 kubelet 使用的配置文件，最终会生成到 /var/lib/kubelet/config.yaml 文件中
# 详细配置请参考官网：https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/
# 或官网: https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
containerRuntimeEndpoint: unix:///run/cri-dockerd.sock